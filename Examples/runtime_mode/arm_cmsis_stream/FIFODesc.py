# automatically generated by the FlatBuffers compiler, do not modify

# namespace: arm_cmsis_stream

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FIFODesc(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FIFODesc()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFIFODesc(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FIFODesc
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FIFODesc
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FIFODesc
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FIFODescStart(builder): builder.StartObject(2)
def Start(builder):
    return FIFODescStart(builder)
def FIFODescAddId(builder, id): builder.PrependUint32Slot(0, id, 0)
def AddId(builder, id):
    return FIFODescAddId(builder, id)
def FIFODescAddLength(builder, length): builder.PrependUint32Slot(1, length, 0)
def AddLength(builder, length):
    return FIFODescAddLength(builder, length)
def FIFODescEnd(builder): return builder.EndObject()
def End(builder):
    return FIFODescEnd(builder)